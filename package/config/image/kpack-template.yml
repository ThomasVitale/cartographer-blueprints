#@ load("@ytt:data", "data")
#@ load("/helpers.star", "merge_labels", "param")

#@ if/end "kpack-template" not in data.values.excluded_blueprints:
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kpack-template
spec:
  params:
  - name: serviceAccount
    default: default
  - name: clusterBuilder
    default: default
  - name: registry
    default: {}
  - name: kpackBindings
    default: []

  imagePath: .status.latestImage

  healthRule:
    singleConditionType: Ready
  
  ytt: |
    #@ load("@ytt:data", "data")
    ---
    apiVersion: kpack.io/v1alpha2
    kind: Image
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "build" })
    spec:
      tag: #@ image()
      serviceAccountName: #@ data.values.params.serviceAccount
      builder:
        kind: ClusterBuilder
        name: #@ data.values.params.clusterBuilder
      source:
        blob:
          url: #@ data.values.source.url
        #@ if/end hasattr(data.values.workload.spec.source, "subPath"):
        subPath: #@ data.values.workload.spec.source.subPath
      build:
        env:
        - name: BP_OCI_SOURCE
          value: #@ data.values.source.revision
        #@ if/end param("live-update"):
        - name: BP_LIVE_RELOAD_ENABLED
          value: 'true'
        #@ if hasattr(data.values.workload.spec.build, "env"):
        #@ for var in data.values.workload.spec.build.env:
        - name: #@ var.name
          #@ if/end hasattr(var, "value"):
          value: #@ var.value
          #@ if/end hasattr(var, "valueFrom"):
          valueFrom: #@ var.valueFrom
        #@ end
        #@ end
        services: #@ data.values.params.kpackBindings
