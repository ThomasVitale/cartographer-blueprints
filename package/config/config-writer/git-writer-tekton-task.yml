#@ load("@ytt:data", "data")

#@ if/end "git-writer-tekton-task" not in data.values.excluded_blueprints:
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: git-writer
spec:
  description: |-
    Consumes application deployment configuration files as a Base64-encoded JSON and
    pushes them to a Git repository under a given path.
  params:
    - name: git_repository
      description: The Git repository where to push the configuration files.
      type: string
    - name: git_branch
      description: The Git branch where to push the configuration files.
      type: string
      default: "main"
    - name: git_user_email
      description: The email of the user interacting with the Git repository.
      type: string
      default: "cartographer@kadras.io"
    - name: git_user_name
      description: The name of the user interacting with the Git repository.
      type: string
      default: "cartographer"
    - name: git_commit_message
      description: The commit message to use when pushing the configuration files to the Git repository.
      type: string
      default: "Update from Cartographer"
    - name: sub_path
      description: The path in the Git repository where to write the configuration files.
      type: string
      default: "config"
    - name: git_files
      description: The configuration files to push to the Git repository, provided as a Base64-encoded JSON map.
      type: string
  steps:
    - name: git-clone-and-push
      image: paketobuildpacks/build-jammy-base:0.1.46
      workingDir: /tekton/home
      script: |
        #!/usr/bin/env bash

        set -o errexit
        set -o xtrace

        ssh_config_file=$(mktemp)

        echo "
        UserKnownHostsFile /tekton/creds/.ssh/known_hosts
        Include $(credentials.path)/.ssh/config
        " > $ssh_config_file

        export GIT_SSH_COMMAND="ssh -F $ssh_config_file"

        cd `mktemp -d`

        if git clone --depth 1 -b "$(params.git_branch)" "$(params.git_repository)" ./repo; then
          cd ./repo
        else
          git clone --depth 1 "$(params.git_repository)" ./repo
          cd ./repo
          git checkout -b "$(params.git_branch)"
        fi

        git config user.email "$(params.git_user_email)"
        git config user.name "$(params.git_user_name)"

        mkdir -p $(params.sub_path) && rm -rf $(params.sub_path)/*
        cd $(params.sub_path)

        echo '$(params.git_files)' | base64 --decode > files.json
        eval "$(cat files.json | jq -r 'to_entries | .[] | @sh "mkdir -p $(dirname \(.key)) && echo \(.value) > \(.key) && git add \(.key)"')"

        git commit -m "$(params.git_commit_message)" --allow-empty
        git push origin $(params.git_branch)
