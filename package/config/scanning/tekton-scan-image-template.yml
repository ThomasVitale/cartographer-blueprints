#@ load("@ytt:data", "data")

#@ if/end "tekton-scan-image-template" not in data.values.excluded_blueprints:
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: tekton-scan-image-template
  annotations:
    doc: |
      This templates consumes an application container image and executes a Tekton
      scanning task on every detected input change, using the configured vulnerability scanner.
spec:
  params:
    - name: scannerName
      default: trivy
  
  imagePath: .spec.params[0].value
  
  lifecycle: tekton
  
  ytt: |
    #@ load("@ytt:assert", "assert")
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ vulnerabilityScanner = param("scannerName")
    #@ validVulnerabilityScanners = ["grype", "trivy"]
    #@ if vulnerabilityScanner not in validVulnerabilityScanners:
    #@   assert.fail("{} not in {}".format(vulnerabilityScanner, validVulnerabilityScanners))
    #@ end

    ---
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: #@ data.values.workload.metadata.name + "-image-scanner-"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "scan" })
    spec:
      taskRef:
        name: #@ vulnerabilityScanner + "-image-scanner"
        kind: ClusterTask
      params:
      - name: image
        value: #@ data.values.image
