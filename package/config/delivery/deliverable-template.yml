#@ load("@ytt:data", "data")

#@ if/end "deliverable-template" not in data.values.excluded_blueprints:
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: deliverable-template
  labels:
    apps.kadras.io/deliverable-type: web
  annotations:
    doc: |
      Generates a Deliverable resource for the current Workload.
spec:

  ytt: |
    #@ load("@ytt:assert", "assert")
    #@ load("@ytt:data", "data")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def image_bundle():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "bundle",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    #@ def is_gitops_enabled():
    #@   if param("gitops")["strategy"] == "none":
    #@     return False
    #@   end
    #@   if 'server_address' in param("gitops") or 'repository.owner' in param("gitops") or 'repository.name' in param("gitops"):
    #@     'server_address' in param("gitops") or assert.fail("missing param: gitops.server_address")
    #@     'owner' in param("gitops")["repository"] or assert.fail("missing param: gitops.repository.owner")
    #@     'name' in param("gitops")["repository"] or assert.fail("missing param: gitops.repository.name")
    #@   end
    #@   return True
    #@ end

    #@ def strip_trailing_slash(some_string):
    #@   if some_string[-1] == "/":
    #@     return some_string[:-1]
    #@   end
    #@   return some_string
    #@ end

    #@ def git_repository():
    #@   strip_trailing_slash(data.values.params.gitops.server_address)
    #@   return "/".join([
    #@     strip_trailing_slash(data.values.params.gitops.server_address),
    #@     strip_trailing_slash(data.values.params.gitops.repository.owner),
    #@     data.values.params.gitops.repository.name,
    #@   ]) + ".git"
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Deliverable
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "deliverable", "apps.kadras.io/deliverable-type": "web" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      #@ if/end is_gitops_enabled():
      params:
        - name: gitAccessSecret
          value: #@ param("gitAccessSecret")

      source:
        #@ if/end is_gitops_enabled():
        git:
          url: #@ git_repository()
          ref:
            branch: #@ param("gitops")["target_branch"]

        #@ if/end not is_gitops_enabled():
        image: #@ image_bundle()
      
      #@ if/end is_gitops_enabled():
      subPath: #@ "config/" + data.values.workload.metadata.namespace + "/" + data.values.workload.metadata.name
